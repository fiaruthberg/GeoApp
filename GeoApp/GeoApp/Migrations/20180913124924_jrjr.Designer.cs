// <auto-generated />
using System;
using GeoApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoApp.Migrations
{
    [DbContext(typeof(GeoContext))]
    [Migration("20180913124924_jrjr")]
    partial class jrjr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeoApp.Climate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Climates");
                });

            modelBuilder.Entity("GeoApp.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("GeoApp.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Capital");

                    b.Property<int?>("ClimateId");

                    b.Property<int?>("ContinentId");

                    b.Property<int?>("GovernmentPolityId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ClimateId");

                    b.HasIndex("ContinentId");

                    b.HasIndex("GovernmentPolityId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GeoApp.GovernmentPolity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Polity");

                    b.HasKey("Id");

                    b.ToTable("GovernmentPolities");
                });

            modelBuilder.Entity("GeoApp.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("GeoApp.LanguageInCountry", b =>
                {
                    b.Property<int>("LanguageId");

                    b.Property<int>("CountryId");

                    b.HasKey("LanguageId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("LanguagesInCoyntry");
                });

            modelBuilder.Entity("GeoApp.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GeoApp.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("GeoApp.ReligionInCountry", b =>
                {
                    b.Property<int>("ReligionId");

                    b.Property<int>("CountryId");

                    b.HasKey("ReligionId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ReligionsInCountry");
                });

            modelBuilder.Entity("GeoApp.Terrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Terrains");
                });

            modelBuilder.Entity("GeoApp.TerrainInCountry", b =>
                {
                    b.Property<int>("TerrainId");

                    b.Property<int>("CountryId");

                    b.HasKey("TerrainId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("TerrainInCountries");
                });

            modelBuilder.Entity("GeoApp.Country", b =>
                {
                    b.HasOne("GeoApp.Climate", "Climate")
                        .WithMany()
                        .HasForeignKey("ClimateId");

                    b.HasOne("GeoApp.Continent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId");

                    b.HasOne("GeoApp.GovernmentPolity", "GovernmentPolity")
                        .WithMany()
                        .HasForeignKey("GovernmentPolityId");
                });

            modelBuilder.Entity("GeoApp.LanguageInCountry", b =>
                {
                    b.HasOne("GeoApp.Country", "Country")
                        .WithMany("LanguageInCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoApp.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoApp.Region", b =>
                {
                    b.HasOne("GeoApp.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("GeoApp.ReligionInCountry", b =>
                {
                    b.HasOne("GeoApp.Country", "Country")
                        .WithMany("ReligionInCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoApp.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoApp.TerrainInCountry", b =>
                {
                    b.HasOne("GeoApp.Country", "Country")
                        .WithMany("TerrainInCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoApp.Terrain", "Terrain")
                        .WithMany()
                        .HasForeignKey("TerrainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
